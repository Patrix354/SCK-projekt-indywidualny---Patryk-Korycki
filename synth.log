
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.21 (git sha1 e6d2a900a97, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ALU.sv
Parsing SystemVerilog input from `ALU.sv' to AST representation.
Generating RTLIL representation for module `\subtract'.
Generating RTLIL representation for module `\comparator'.
Generating RTLIL representation for module `\shifter'.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     \subtract
Used module:     \comparator
Used module:     \shifter
Parameter \N = 8

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\subtract'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\comparator'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\shifter'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\shifter\N=s32'00000000000000000000000000001000'.

2.5. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000

2.6. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Removing unused module `\ALU'.
Removing unused module `\shifter'.
Removing unused module `\comparator'.
Removing unused module `\subtract'.
Removed 4 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000

3.1.2. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$shifter.sv:0$34 in module $paramod\shifter\N=s32'00000000000000000000000000001000.
Marked 4 switch rules as full_case in process $proc$comparator.sv:0$23 in module $paramod\comparator\N=s32'00000000000000000000000000001000.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~6 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$34'.
     1/2: $1\o_out[7:0]
     2/2: $1\o_ERR[0:0]
Creating decoders for process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$comparator.sv:0$23'.
     1/4: $4\o_out[0:0]
     2/4: $3\o_out[0:0]
     3/4: $2\o_out[0:0]
     4/4: $1\o_out[0:0]
Creating decoders for process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$20'.
Creating decoders for process `\ALU_rtl.$proc$ALU.sv:0$18'.
     1/3: $1\o_carry[0:0]
     2/3: $1\o_out[7:0]
     3/3: $1\o_ERR[0:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
