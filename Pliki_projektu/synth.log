
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.22 (git sha1 f109fa3d4c5, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ALU.sv
Parsing SystemVerilog input from `ALU.sv' to AST representation.
Generating RTLIL representation for module `\subtract'.
Generating RTLIL representation for module `\comparator'.
Generating RTLIL representation for module `\shifter'.
Generating RTLIL representation for module `\changer'.
Generating RTLIL representation for module `\ALU'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     \subtract
Used module:     \comparator
Used module:     \shifter
Used module:     \changer
Parameter \N = 8

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\subtract'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\comparator'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\shifter'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\changer'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\changer\N=s32'00000000000000000000000000001000'.

2.6. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000

2.7. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Removing unused module `\ALU'.
Removing unused module `\changer'.
Removing unused module `\shifter'.
Removing unused module `\comparator'.
Removing unused module `\subtract'.
Removed 5 unused modules.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000

3.1.2. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$changer.sv:0$106 in module $paramod\changer\N=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$shifter.sv:0$101 in module $paramod\shifter\N=s32'00000000000000000000000000001000.
Marked 4 switch rules as full_case in process $proc$comparator.sv:0$90 in module $paramod\comparator\N=s32'00000000000000000000000000001000.
Marked 4 switch rules as full_case in process $proc$subtract.sv:0$77 in module $paramod\subtract\N=s32'00000000000000000000000000001000.
Removed 1 dead cases from process $proc$ALU.sv:44$37 in module ALU_rtl.
Marked 4 switch rules as full_case in process $proc$ALU.sv:44$37 in module ALU_rtl.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 16 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~15 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$changer.sv:0$106'.
     1/2: $1\o_out[7:0]
     2/2: $1\o_ERR[0:0]
Creating decoders for process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
     1/5: $2\o_ovf[0:0]
     2/5: $1\o_ovf[0:0]
     3/5: $1\s_out[15:0]
     4/5: $1\o_out[7:0]
     5/5: $1\o_ERR[0:0]
Creating decoders for process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$comparator.sv:0$90'.
     1/4: $4\o_out[0:0]
     2/4: $3\o_out[0:0]
     3/4: $2\o_out[0:0]
     4/4: $1\o_out[0:0]
Creating decoders for process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
     1/11: $4\s_carry[0:0]
     2/11: $4\s_out[6:0]
     3/11: $4\s_sign[0:0]
     4/11: $3\s_carry[0:0]
     5/11: $3\s_out[6:0]
     6/11: $3\s_sign[0:0]
     7/11: $2\s_sign[0:0]
     8/11: { $2\s_carry[0:0] $2\s_out[6:0] }
     9/11: $1\s_sign[0:0]
    10/11: $1\s_out[6:0]
    11/11: $1\s_carry[0:0]
Creating decoders for process `\ALU_rtl.$proc$ALU.sv:44$37'.
     1/16: $6\o_status[3:3]
     2/16: $5\o_status[1:1]
     3/16: $4\o_status[3:3]
     4/16: $3\o_status[1:1]
     5/16: $2\o_status[3:0] [3]
     6/16: $2\o_status[3:0] [1]
     7/16: $2\o_status[3:0] [2]
     8/16: $2\o_out[7:0]
     9/16: $2\o_status[3:0] [0]
    10/16: $1\o_status[3:0] [3]
    11/16: $1\o_status[3:0] [2]
    12/16: $1\o_status[3:0] [1]
    13/16: $1\o_status[3:0] [0]
    14/16: $1\o_out[7:0]
    15/16: $1$fordecl_block$1.i[31:0]$40
    16/16: $1\zeros[31:0]

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\changer\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$changer.sv:0$106'.
No latch inferred for signal `$paramod\changer\N=s32'00000000000000000000000000001000.\o_ERR' from process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$changer.sv:0$106'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\s_out' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\o_ERR' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\o_ovf' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
No latch inferred for signal `$paramod\comparator\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$comparator.sv:0$90'.
No latch inferred for signal `$paramod\subtract\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
No latch inferred for signal `$paramod\subtract\N=s32'00000000000000000000000000001000.\o_carry' from process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
No latch inferred for signal `$paramod\subtract\N=s32'00000000000000000000000000001000.\s_carry' from process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
No latch inferred for signal `$paramod\subtract\N=s32'00000000000000000000000000001000.\s_out' from process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
No latch inferred for signal `$paramod\subtract\N=s32'00000000000000000000000000001000.\s_sign' from process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ALU_rtl.\o_out' using process `\ALU_rtl.$proc$ALU.sv:44$37'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\ALU_rtl.\o_status' using process `\ALU_rtl.$proc$ALU.sv:44$37'.
  created $dff cell `$procdff$321' with positive edge clock.
Creating register for signal `\ALU_rtl.\zeros' using process `\ALU_rtl.$proc$ALU.sv:44$37'.
  created $dff cell `$procdff$322' with positive edge clock.
Creating register for signal `\ALU_rtl.$fordecl_block$1.i' using process `\ALU_rtl.$proc$ALU.sv:44$37'.
  created $dff cell `$procdff$323' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$changer.sv:0$106'.
Removing empty process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$changer.sv:0$106'.
Found and cleaned up 2 empty switches in `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
Removing empty process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$shifter.sv:0$101'.
Found and cleaned up 4 empty switches in `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$comparator.sv:0$90'.
Removing empty process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$comparator.sv:0$90'.
Found and cleaned up 4 empty switches in `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
Removing empty process `$paramod\subtract\N=s32'00000000000000000000000000001000.$proc$subtract.sv:0$77'.
Found and cleaned up 4 empty switches in `\ALU_rtl.$proc$ALU.sv:44$37'.
Removing empty process `ALU_rtl.$proc$ALU.sv:44$37'.
Cleaned up 15 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
<suppressed ~11 debug messages>
Optimizing module ALU_rtl.
<suppressed ~21 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.
<suppressed ~4 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 20 unused cells and 155 unused wires.
<suppressed ~38 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\changer\N=s32'00000000000000000000000000001000...
Checking module $paramod\comparator\N=s32'00000000000000000000000000001000...
Checking module $paramod\shifter\N=s32'00000000000000000000000000001000...
Checking module $paramod\subtract\N=s32'00000000000000000000000000001000...
Checking module ALU_rtl...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ALU_rtl'.
<suppressed ~24 debug messages>
Removed a total of 11 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$139.
    dead port 1/2 on $mux $procmux$142.
    dead port 1/2 on $mux $procmux$145.
    dead port 1/2 on $mux $procmux$151.
    dead port 1/2 on $mux $procmux$154.
    dead port 1/2 on $mux $procmux$160.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$121.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$169.
    dead port 2/2 on $mux $procmux$172.
    dead port 1/2 on $mux $procmux$178.
    dead port 2/2 on $mux $procmux$181.
    dead port 1/2 on $mux $procmux$187.
    dead port 2/2 on $mux $procmux$190.
    dead port 2/2 on $mux $procmux$196.
    dead port 2/2 on $mux $procmux$202.
    dead port 2/2 on $mux $procmux$208.
    dead port 1/2 on $mux $procmux$214.
    dead port 1/2 on $mux $procmux$220.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$234.
    dead port 2/2 on $mux $procmux$237.
    dead port 1/2 on $mux $procmux$242.
    dead port 2/2 on $mux $procmux$245.
    dead port 2/2 on $mux $procmux$251.
    dead port 2/2 on $mux $procmux$257.
    dead port 2/2 on $mux $procmux$281.
    dead port 2/2 on $mux $procmux$297.
Removed 26 multiplexer ports.
<suppressed ~16 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
    New ctrl vector for $pmux cell $procmux$275: { $procmux$279_CMP $procmux$277_CMP $auto$opt_reduce.cc:134:opt_pmux$330 }
    New ctrl vector for $pmux cell $procmux$291: { $auto$opt_reduce.cc:134:opt_pmux$332 $procmux$277_CMP $procmux$276_CMP }
  Optimizing cells in module \ALU_rtl.
Performed a total of 4 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 0 unused cells and 38 unused wires.
<suppressed ~4 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 3 on $procdff$321 ($dff) from module ALU_rtl.

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.6.20. Executing OPT_DFF pass (perform DFF optimizations).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$320 ($dff) from module ALU_rtl (D = $2\o_out[7:0], Q = \o_out, rval = 8'00000000).
Adding SRST signal on $auto$ff.cc:266:slice$333 ($dff) from module ALU_rtl (D = { $2\o_status[3:0] [2] $3\o_status[1:1] $2\o_status[3:0] [0] }, Q = \o_status [2:0], rval = 3'000).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 4 unused cells and 2 unused wires.
<suppressed ~5 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 bits (of 32) from port B of cell $paramod\changer\N=s32'00000000000000000000000000001000.$ge$changer.sv:19$107 ($ge).
Removed top 31 bits (of 32) from port A of cell $paramod\changer\N=s32'00000000000000000000000000001000.$shl$changer.sv:24$109 ($shl).
Removed top 24 bits (of 32) from port Y of cell $paramod\changer\N=s32'00000000000000000000000000001000.$xor$changer.sv:24$110 ($xor).
Removed top 24 bits (of 32) from port B of cell $paramod\changer\N=s32'00000000000000000000000000001000.$xor$changer.sv:24$110 ($xor).
Removed top 24 bits (of 32) from port Y of cell $paramod\changer\N=s32'00000000000000000000000000001000.$shl$changer.sv:24$109 ($shl).
Removed top 24 bits (of 32) from wire $paramod\changer\N=s32'00000000000000000000000000001000.$shl$changer.sv:24$109_Y.
Removed top 24 bits (of 32) from wire $paramod\changer\N=s32'00000000000000000000000000001000.$xor$changer.sv:24$110_Y.
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$43 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$47 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$51 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$55 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$59 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$63 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$67 ($not).
Removed top 31 bits (of 32) from port A of cell ALU_rtl.$not$ALU.sv:75$71 ($not).
Removed top 1 bits (of 2) from port B of cell ALU_rtl.$procmux$278_CMP0 ($eq).
Removed top 1 bits (of 4) from wire ALU_rtl.$2\o_status[3:0].

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 0 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\changer\N=s32'00000000000000000000000000001000:
  creating $alu model for $ge$changer.sv:19$107 ($ge): new $alu
  creating $alu cell for $ge$changer.sv:19$107: $auto$alumacc.cc:485:replace_alu$340
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\comparator\N=s32'00000000000000000000000000001000:
  creating $alu model for $ge$comparator.sv:24$97 ($ge): new $alu
  creating $alu model for $le$comparator.sv:27$99 ($le): merged with $ge$comparator.sv:24$97.
  creating $alu cell for $ge$comparator.sv:24$97, $le$comparator.sv:27$99: $auto$alumacc.cc:485:replace_alu$350
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\shifter\N=s32'00000000000000000000000000001000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\subtract\N=s32'00000000000000000000000000001000:
  creating $macc model for $add$subtract.sv:34$86 ($add).
  creating $macc model for $sub$subtract.sv:25$81 ($sub).
  creating $macc model for $sub$subtract.sv:29$82 ($sub).
  creating $alu model for $macc $sub$subtract.sv:29$82.
  creating $alu model for $macc $sub$subtract.sv:25$81.
  creating $alu model for $macc $add$subtract.sv:34$86.
  creating $alu model for $gt$subtract.sv:24$80 ($gt): merged with $sub$subtract.sv:29$82.
  creating $alu cell for $sub$subtract.sv:25$81: $auto$alumacc.cc:485:replace_alu$365
  creating $alu cell for $add$subtract.sv:34$86: $auto$alumacc.cc:485:replace_alu$368
  creating $alu cell for $sub$subtract.sv:29$82, $gt$subtract.sv:24$80: $auto$alumacc.cc:485:replace_alu$371
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module ALU_rtl:
  creating $macc model for $add$ALU.sv:75$49 ($add).
  creating $macc model for $add$ALU.sv:75$53 ($add).
  creating $macc model for $add$ALU.sv:75$57 ($add).
  creating $macc model for $add$ALU.sv:75$61 ($add).
  creating $macc model for $add$ALU.sv:75$65 ($add).
  creating $macc model for $add$ALU.sv:75$69 ($add).
  creating $macc model for $add$ALU.sv:75$73 ($add).
  merging $macc model for $add$ALU.sv:75$69 into $add$ALU.sv:75$73.
  merging $macc model for $add$ALU.sv:75$65 into $add$ALU.sv:75$73.
  merging $macc model for $add$ALU.sv:75$61 into $add$ALU.sv:75$73.
  merging $macc model for $add$ALU.sv:75$57 into $add$ALU.sv:75$73.
  merging $macc model for $add$ALU.sv:75$53 into $add$ALU.sv:75$73.
  merging $macc model for $add$ALU.sv:75$49 into $add$ALU.sv:75$73.
  creating $macc cell for $add$ALU.sv:75$73: $auto$alumacc.cc:365:replace_macc$376
  created 0 $alu and 1 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
<suppressed ~2 debug messages>
Optimizing module ALU_rtl.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 7 unused cells and 11 unused wires.
<suppressed ~11 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~3 debug messages>
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
<suppressed ~7 debug messages>
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
<suppressed ~2 debug messages>
Optimizing module ALU_rtl.
<suppressed ~101 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 2 unused cells and 49 unused wires.
<suppressed ~7 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtract\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ALU_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtract\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \ALU_rtl.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\ALU_rtl'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper maccmap for cells of type $macc.
  add { 31'0000000000000000000000000000000 $add$ALU.sv:75$45_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$72_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$68_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$64_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$60_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$56_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$52_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$ALU.sv:75$48_Y [0] } (32 bits, unsigned)
  packed 3 (3) bits / 3 words into adder tree
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000001 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000010 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000011 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$5e422c97d4648c7864402691d7b06fc43e6ffb33\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod$constmap:5a364ddcb357ea92d2cbe6389550e659ac18a65b$paramod$ed1b2f8d7cf549c99cbac27e7274d42f4116c218\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:72cdabb1749dac72049399dad655ca81335c3226$paramod$c9b0e4287a2eb8d88b30f100e3158318a9c0abad\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$4bdb94ac02745db6fc41e2e497d9b9793cd51dc6\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~1406 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
<suppressed ~36 debug messages>
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~10 debug messages>
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
<suppressed ~60 debug messages>
Optimizing module ALU_rtl.
<suppressed ~359 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
<suppressed ~12 debug messages>
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
<suppressed ~9 debug messages>
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
<suppressed ~24 debug messages>
Finding identical cells in module `\ALU_rtl'.
<suppressed ~9 debug messages>
Removed a total of 18 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 45 unused cells and 441 unused wires.
<suppressed ~50 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `$paramod\changer\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 61 gates and 78 wires to a netlist network with 16 inputs and 9 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        2
ABC RESULTS:                OR cells:       30
ABC RESULTS:               XOR cells:        8
ABC RESULTS:            ANDNOT cells:       12
ABC RESULTS:        internal signals:       53
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

3.22.2. Extracting gate netlist of module `$paramod\comparator\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 70 wires to a netlist network with 16 inputs and 1 outputs.

3.22.2.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.2.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              NAND cells:        2
ABC RESULTS:            ANDNOT cells:       17
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:                OR cells:        2
ABC RESULTS:               XOR cells:        4
ABC RESULTS:               MUX cells:        2
ABC RESULTS:        internal signals:       53
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

3.22.3. Extracting gate netlist of module `$paramod\shifter\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 90 gates and 107 wires to a netlist network with 16 inputs and 9 outputs.

3.22.3.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.3.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:               MUX cells:       24
ABC RESULTS:               NOT cells:        5
ABC RESULTS:                OR cells:       36
ABC RESULTS:            ANDNOT cells:       22
ABC RESULTS:        internal signals:       82
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

3.22.4. Extracting gate netlist of module `$paramod\subtract\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 179 gates and 196 wires to a netlist network with 16 inputs and 9 outputs.

3.22.4.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.4.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        9
ABC RESULTS:               XOR cells:       19
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        3
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:            ANDNOT cells:       56
ABC RESULTS:                OR cells:        5
ABC RESULTS:               AND cells:       13
ABC RESULTS:               MUX cells:       22
ABC RESULTS:        internal signals:      171
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

3.22.5. Extracting gate netlist of module `\ALU_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 68 gates and 100 wires to a netlist network with 31 inputs and 11 outputs.

3.22.5.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.5.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:        2
ABC RESULTS:               XOR cells:        7
ABC RESULTS:               NOR cells:        5
ABC RESULTS:               MUX cells:        9
ABC RESULTS:               NOT cells:       14
ABC RESULTS:              NAND cells:        2
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:            ANDNOT cells:       21
ABC RESULTS:        internal signals:       58
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       11
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtract\N=s32'00000000000000000000000000001000.
Optimizing module ALU_rtl.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ALU_rtl'.
<suppressed ~3 debug messages>
Removed a total of 2 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 0 unused cells and 288 unused wires.
<suppressed ~5 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000

3.24.2. Analyzing design hierarchy..
Top module:  \ALU_rtl
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\subtract\N=s32'00000000000000000000000000001000
Removed 0 unused modules.

3.25. Printing statistics.

=== $paramod\changer\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 51
   Number of wire bits:             72
   Number of public wires:           6
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 54
     $_ANDNOT_                      12
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        1
     $_OR_                          30
     $_XOR_                          8

=== $paramod\comparator\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 43
   Number of wire bits:             57
   Number of public wires:           5
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 39
     $_ANDNOT_                      17
     $_MUX_                          2
     $_NAND_                         2
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                           2
     $_XNOR_                         4
     $_XOR_                          4

=== $paramod\shifter\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 93
   Number of wire bits:            114
   Number of public wires:           7
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 95
     $_ANDNOT_                      22
     $_MUX_                         24
     $_NOT_                          5
     $_ORNOT_                        8
     $_OR_                          36

=== $paramod\subtract\N=s32'00000000000000000000000000001000 ===

   Number of wires:                149
   Number of wire bits:            176
   Number of public wires:           9
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                149
     $_ANDNOT_                      56
     $_AND_                         13
     $_MUX_                         22
     $_NAND_                         4
     $_NOR_                          3
     $_NOT_                          9
     $_ORNOT_                       12
     $_OR_                           5
     $_XNOR_                         6
     $_XOR_                         19

=== ALU_rtl ===

   Number of wires:                 74
   Number of wire bits:            127
   Number of public wires:          15
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $_ANDNOT_                      21
     $_MUX_                          9
     $_NAND_                         2
     $_NOR_                          4
     $_NOT_                         14
     $_ORNOT_                        7
     $_OR_                           2
     $_SDFF_PN0_                    11
     $_XOR_                          7
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtract\N=s32'00000000000000000000000000001000      1

=== design hierarchy ===

   ALU_rtl                           1
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtract\N=s32'00000000000000000000000000001000      1

   Number of wires:                410
   Number of wire bits:            546
   Number of public wires:          42
   Number of public wire bits:     171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                414
     $_ANDNOT_                     128
     $_AND_                         13
     $_MUX_                         57
     $_NAND_                         8
     $_NOR_                          8
     $_NOT_                         32
     $_ORNOT_                       34
     $_OR_                          75
     $_SDFF_PN0_                    11
     $_XNOR_                        10
     $_XOR_                         38

3.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\changer\N=s32'00000000000000000000000000001000...
Checking module $paramod\comparator\N=s32'00000000000000000000000000001000...
Checking module $paramod\shifter\N=s32'00000000000000000000000000001000...
Checking module $paramod\subtract\N=s32'00000000000000000000000000001000...
Checking module ALU_rtl...
Found and reported 0 problems.

4. Executing ABC pass (technology mapping using ABC).

4.1. Extracting gate netlist of module `$paramod\changer\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 54 gates and 70 wires to a netlist network with 16 inputs and 9 outputs.

4.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       18
ABC RESULTS:                OR cells:       35
ABC RESULTS:               AND cells:       31
ABC RESULTS:        internal signals:       45
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

4.2. Extracting gate netlist of module `$paramod\comparator\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 39 gates and 55 wires to a netlist network with 16 inputs and 1 outputs.

4.2.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.2.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       16
ABC RESULTS:               XOR cells:        2
ABC RESULTS:               AND cells:       34
ABC RESULTS:                OR cells:       29
ABC RESULTS:        internal signals:       38
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

4.3. Extracting gate netlist of module `$paramod\shifter\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 95 gates and 111 wires to a netlist network with 16 inputs and 9 outputs.

4.3.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:       43
ABC RESULTS:               AND cells:       49
ABC RESULTS:        internal signals:       86
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

4.4. Extracting gate netlist of module `$paramod\subtract\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 149 gates and 165 wires to a netlist network with 16 inputs and 9 outputs.

4.4.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.4.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       24
ABC RESULTS:               XOR cells:       10
ABC RESULTS:                OR cells:       63
ABC RESULTS:               AND cells:       57
ABC RESULTS:        internal signals:      140
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

4.5. Extracting gate netlist of module `\ALU_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 97 wires to a netlist network with 31 inputs and 11 outputs.

4.5.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.5.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               XOR cells:        7
ABC RESULTS:               AND cells:       32
ABC RESULTS:                OR cells:       28
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       11
Removing temp directory.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtract\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \ALU_rtl..
Removed 0 unused cells and 498 unused wires.
<suppressed ~5 debug messages>

6. Executing Verilog backend.

6.1. Executing BMUXMAP pass.

6.2. Executing DEMUXMAP pass.
Dumping module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Dumping module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Dumping module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Dumping module `$paramod\subtract\N=s32'00000000000000000000000000001000'.
Dumping module `\ALU_rtl'.

7. Printing statistics.

=== $paramod\changer\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 81
   Number of wire bits:            102
   Number of public wires:           6
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 84
     $_AND_                         31
     $_NOT_                         18
     $_OR_                          35

   Estimated number of transistors:        432

=== $paramod\comparator\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 85
   Number of wire bits:             99
   Number of public wires:           5
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $_AND_                         34
     $_NOT_                         16
     $_OR_                          29
     $_XOR_                          2

   Estimated number of transistors:        434

=== $paramod\shifter\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 98
   Number of wire bits:            119
   Number of public wires:           7
   Number of public wire bits:      28
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     $_AND_                         49
     $_NOT_                          8
     $_OR_                          43

   Estimated number of transistors:        568

=== $paramod\subtract\N=s32'00000000000000000000000000001000 ===

   Number of wires:                154
   Number of wire bits:            181
   Number of public wires:           9
   Number of public wire bits:      36
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                154
     $_AND_                         57
     $_NOT_                         24
     $_OR_                          63
     $_XOR_                         10

   Estimated number of transistors:        888

=== ALU_rtl ===

   Number of wires:                 79
   Number of wire bits:            132
   Number of public wires:          15
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 86
     $_AND_                         32
     $_NOT_                          4
     $_OR_                          28
     $_SDFF_PN0_                    11
     $_XOR_                          7
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtract\N=s32'00000000000000000000000000001000      1

   Estimated number of transistors:        452+

=== design hierarchy ===

   ALU_rtl                           1
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtract\N=s32'00000000000000000000000000001000      1

   Number of wires:                497
   Number of wire bits:            633
   Number of public wires:          42
   Number of public wire bits:     171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                501
     $_AND_                        203
     $_NOT_                         70
     $_OR_                         198
     $_SDFF_PN0_                    11
     $_XOR_                         19

   Estimated number of transistors:       2774+

End of script. Logfile hash: 72e600d94d, CPU: user 0.59s system 0.01s, MEM: 30.50 MB peak
Yosys 0.22 (git sha1 f109fa3d4c5, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)
Time spent: 51% 2x abc (0 sec), 12% 27x opt_expr (0 sec), ...
