
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.23 (git sha1 7ce5011c24b, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)


-- Executing script file `run.ys' --

1. Executing Verilog-2005 frontend: ../MODEL/exe_unit_w6.sv
Parsing SystemVerilog input from `../MODEL/exe_unit_w6.sv' to AST representation.
Generating RTLIL representation for module `\exe_unit_w6'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ../MODEL/shifter.sv
Parsing SystemVerilog input from `../MODEL/shifter.sv' to AST representation.
Generating RTLIL representation for module `\shifter'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ../MODEL/changer.sv
Parsing SystemVerilog input from `../MODEL/changer.sv' to AST representation.
Generating RTLIL representation for module `\changer'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ../MODEL/subtractor.sv
Parsing SystemVerilog input from `../MODEL/subtractor.sv' to AST representation.
Generating RTLIL representation for module `\subtractor'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ../MODEL/comparator.sv
Parsing SystemVerilog input from `../MODEL/comparator.sv' to AST representation.
Generating RTLIL representation for module `\comparator'.
Successfully finished Verilog frontend.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     \subtractor
Used module:     \comparator
Used module:     \shifter
Used module:     \changer
Parameter \N = 8

6.2. Executing AST frontend in derive mode using pre-parsed AST for module `\subtractor'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

6.3. Executing AST frontend in derive mode using pre-parsed AST for module `\comparator'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

6.4. Executing AST frontend in derive mode using pre-parsed AST for module `\shifter'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Parameter \N = 8

6.5. Executing AST frontend in derive mode using pre-parsed AST for module `\changer'.
Parameter \N = 8
Generating RTLIL representation for module `$paramod\changer\N=s32'00000000000000000000000000001000'.

6.6. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     $paramod\subtractor\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000

6.7. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     $paramod\subtractor\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Removing unused module `\comparator'.
Removing unused module `\subtractor'.
Removing unused module `\changer'.
Removing unused module `\shifter'.
Removing unused module `\exe_unit_w6'.
Removed 5 unused modules.

7. Executing SYNTH pass.

7.1. Executing HIERARCHY pass (managing design hierarchy).

7.1.1. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     $paramod\subtractor\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000

7.1.2. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     $paramod\subtractor\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Removed 0 unused modules.

7.2. Executing PROC pass (convert processes to netlists).

7.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$../MODEL/changer.sv:0$118 in module $paramod\changer\N=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$../MODEL/shifter.sv:0$113 in module $paramod\shifter\N=s32'00000000000000000000000000001000.
Marked 5 switch rules as full_case in process $proc$../MODEL/comparator.sv:0$97 in module $paramod\comparator\N=s32'00000000000000000000000000001000.
Marked 4 switch rules as full_case in process $proc$../MODEL/subtractor.sv:0$83 in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Marked 1 switch rules as full_case in process $proc$../MODEL/exe_unit_w6.sv:39$3 in module exe_unit_w6_rtl.
Removed 1 dead cases from process $proc$../MODEL/exe_unit_w6.sv:0$5 in module exe_unit_w6_rtl.
Marked 3 switch rules as full_case in process $proc$../MODEL/exe_unit_w6.sv:0$5 in module exe_unit_w6_rtl.
Removed a total of 1 dead cases.

7.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 19 assignments to connections.

7.2.4. Executing PROC_INIT pass (extract init attributes).

7.2.5. Executing PROC_ARST pass (detect async resets in processes).

7.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~16 debug messages>

7.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$../MODEL/changer.sv:0$118'.
     1/2: $1\o_out[7:0]
     2/2: $1\o_ERR[0:0]
Creating decoders for process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
     1/5: $2\o_ovf[0:0]
     2/5: $1\o_ovf[0:0]
     3/5: $1\s_out[15:0]
     4/5: $1\o_out[7:0]
     5/5: $1\o_ERR[0:0]
Creating decoders for process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$../MODEL/comparator.sv:0$97'.
     1/5: $5\o_out[0:0]
     2/5: $4\o_out[0:0]
     3/5: $3\o_out[0:0]
     4/5: $2\o_out[0:0]
     5/5: $1\o_out[0:0]
Creating decoders for process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
     1/11: $4\s_carry[0:0]
     2/11: $4\s_out[6:0]
     3/11: $4\s_sign[0:0]
     4/11: $3\s_carry[0:0]
     5/11: $3\s_out[6:0]
     6/11: $3\s_sign[0:0]
     7/11: $2\s_sign[0:0]
     8/11: { $2\s_carry[0:0] $2\s_out[6:0] }
     9/11: $1\s_sign[0:0]
    10/11: $1\s_carry[0:0]
    11/11: $1\s_out[6:0]
Creating decoders for process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:39$3'.
     1/3: $0\s_op[1:0]
     2/3: $0\s_b[7:0]
     3/3: $0\s_a[7:0]
Creating decoders for process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.
     1/7: $6\o_status[3:3]
     2/7: $5\o_status[1:1]
     3/7: $4\o_status[3:3]
     4/7: $3\o_status[1:1]
     5/7: $1\o_status[0:0]
     6/7: $2\o_status[2:2]
     7/7: $1\o_out[7:0]

7.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\changer\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$../MODEL/changer.sv:0$118'.
No latch inferred for signal `$paramod\changer\N=s32'00000000000000000000000000001000.\o_ERR' from process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$../MODEL/changer.sv:0$118'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\o_ERR' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\o_ovf' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
No latch inferred for signal `$paramod\shifter\N=s32'00000000000000000000000000001000.\s_out' from process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
No latch inferred for signal `$paramod\comparator\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$../MODEL/comparator.sv:0$97'.
No latch inferred for signal `$paramod\subtractor\N=s32'00000000000000000000000000001000.\o_out' from process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
No latch inferred for signal `$paramod\subtractor\N=s32'00000000000000000000000000001000.\o_carry' from process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
No latch inferred for signal `$paramod\subtractor\N=s32'00000000000000000000000000001000.\s_out' from process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
No latch inferred for signal `$paramod\subtractor\N=s32'00000000000000000000000000001000.\s_carry' from process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
No latch inferred for signal `$paramod\subtractor\N=s32'00000000000000000000000000001000.\s_sign' from process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
No latch inferred for signal `\exe_unit_w6_rtl.\o_status' from process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.
No latch inferred for signal `\exe_unit_w6_rtl.\o_out' from process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.
No latch inferred for signal `\exe_unit_w6_rtl.\zeros' from process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.
No latch inferred for signal `\exe_unit_w6_rtl.$fordecl_block$1.i' from process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.

7.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\exe_unit_w6_rtl.\s_op' using process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:39$3'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\exe_unit_w6_rtl.\s_a' using process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:39$3'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\exe_unit_w6_rtl.\s_b' using process `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:39$3'.
  created $dff cell `$procdff$301' with positive edge clock.

7.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

7.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$../MODEL/changer.sv:0$118'.
Removing empty process `$paramod\changer\N=s32'00000000000000000000000000001000.$proc$../MODEL/changer.sv:0$118'.
Found and cleaned up 2 empty switches in `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
Removing empty process `$paramod\shifter\N=s32'00000000000000000000000000001000.$proc$../MODEL/shifter.sv:0$113'.
Found and cleaned up 5 empty switches in `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$../MODEL/comparator.sv:0$97'.
Removing empty process `$paramod\comparator\N=s32'00000000000000000000000000001000.$proc$../MODEL/comparator.sv:0$97'.
Found and cleaned up 4 empty switches in `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
Removing empty process `$paramod\subtractor\N=s32'00000000000000000000000000001000.$proc$../MODEL/subtractor.sv:0$83'.
Found and cleaned up 1 empty switch in `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:39$3'.
Removing empty process `exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:39$3'.
Found and cleaned up 3 empty switches in `\exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.
Removing empty process `exe_unit_w6_rtl.$proc$../MODEL/exe_unit_w6.sv:0$5'.
Cleaned up 16 empty switches.

7.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~6 debug messages>
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
<suppressed ~4 debug messages>
Optimizing module exe_unit_w6_rtl.
<suppressed ~7 debug messages>

7.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.
<suppressed ~4 debug messages>

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 2 unused cells and 138 unused wires.
<suppressed ~19 debug messages>

7.5. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\changer\N=s32'00000000000000000000000000001000...
Checking module $paramod\comparator\N=s32'00000000000000000000000000001000...
Checking module $paramod\shifter\N=s32'00000000000000000000000000001000...
Checking module $paramod\subtractor\N=s32'00000000000000000000000000001000...
Checking module exe_unit_w6_rtl...
Found and reported 0 problems.

7.6. Executing OPT pass (performing simple optimizations).

7.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
<suppressed ~6 debug messages>
Finding identical cells in module `\exe_unit_w6_rtl'.
<suppressed ~24 debug messages>
Removed a total of 12 cells.

7.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$151.
    dead port 1/2 on $mux $procmux$154.
    dead port 1/2 on $mux $procmux$157.
    dead port 1/2 on $mux $procmux$160.
    dead port 1/2 on $mux $procmux$166.
    dead port 1/2 on $mux $procmux$169.
    dead port 1/2 on $mux $procmux$172.
    dead port 1/2 on $mux $procmux$178.
    dead port 1/2 on $mux $procmux$181.
    dead port 1/2 on $mux $procmux$187.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$133.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$196.
    dead port 1/2 on $mux $procmux$199.
    dead port 1/2 on $mux $procmux$205.
    dead port 1/2 on $mux $procmux$208.
    dead port 1/2 on $mux $procmux$214.
    dead port 1/2 on $mux $procmux$217.
    dead port 1/2 on $mux $procmux$223.
    dead port 1/2 on $mux $procmux$229.
    dead port 1/2 on $mux $procmux$235.
    dead port 2/2 on $mux $procmux$241.
    dead port 2/2 on $mux $procmux$247.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$271.
    dead port 1/2 on $mux $procmux$276.
Removed 24 multiplexer ports.
<suppressed ~18 debug messages>

7.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
    New ctrl vector for $pmux cell $procmux$284: { $auto$opt_reduce.cc:134:opt_pmux$308 $procmux$286_CMP $procmux$285_CMP }
    New ctrl vector for $pmux cell $procmux$289: { $procmux$288_CMP $procmux$286_CMP $auto$opt_reduce.cc:134:opt_pmux$310 }
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 2 changes.

7.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.6.6. Executing OPT_DFF pass (perform DFF optimizations).

7.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 0 unused cells and 36 unused wires.
<suppressed ~4 debug messages>

7.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.6.9. Rerunning OPT passes. (Maybe there is more to do..)

7.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

7.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 0 changes.

7.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.6.13. Executing OPT_DFF pass (perform DFF optimizations).

7.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.6.16. Finished OPT passes. (There is nothing left to do.)

7.7. Executing FSM pass (extract and optimize FSM).

7.7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

7.8. Executing OPT pass (performing simple optimizations).

7.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

7.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 0 changes.

7.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$301 ($dff) from module exe_unit_w6_rtl (D = \in_b, Q = \s_b, rval = 8'00000000).
Adding SRST signal on $procdff$300 ($dff) from module exe_unit_w6_rtl (D = \in_a, Q = \s_a, rval = 8'00000000).
Adding SRST signal on $procdff$299 ($dff) from module exe_unit_w6_rtl (D = \i_op, Q = \s_op, rval = 2'00).

7.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

7.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.8.9. Rerunning OPT passes. (Maybe there is more to do..)

7.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

7.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 0 changes.

7.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.8.13. Executing OPT_DFF pass (perform DFF optimizations).

7.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.8.16. Finished OPT passes. (There is nothing left to do.)

7.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 bits (of 32) from port B of cell $paramod\changer\N=s32'00000000000000000000000000001000.$gt$../MODEL/changer.sv:13$119 ($gt).
Removed top 31 bits (of 32) from port A of cell $paramod\changer\N=s32'00000000000000000000000000001000.$shl$../MODEL/changer.sv:18$121 ($shl).
Removed top 24 bits (of 32) from port Y of cell $paramod\changer\N=s32'00000000000000000000000000001000.$or$../MODEL/changer.sv:18$122 ($or).
Removed top 24 bits (of 32) from port B of cell $paramod\changer\N=s32'00000000000000000000000000001000.$or$../MODEL/changer.sv:18$122 ($or).
Removed top 24 bits (of 32) from port Y of cell $paramod\changer\N=s32'00000000000000000000000000001000.$shl$../MODEL/changer.sv:18$121 ($shl).
Removed top 24 bits (of 32) from wire $paramod\changer\N=s32'00000000000000000000000000001000.$or$../MODEL/changer.sv:18$122_Y.
Removed top 24 bits (of 32) from wire $paramod\changer\N=s32'00000000000000000000000000001000.$shl$../MODEL/changer.sv:18$121_Y.
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$9 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$13 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$17 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$21 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$25 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$29 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$33 ($not).
Removed top 31 bits (of 32) from port A of cell exe_unit_w6_rtl.$not$../MODEL/exe_unit_w6.sv:79$37 ($not).
Removed top 30 bits (of 32) from port B of cell exe_unit_w6_rtl.$eq$../MODEL/exe_unit_w6.sv:86$42 ($eq).
Removed top 1 bits (of 2) from port B of cell exe_unit_w6_rtl.$procmux$287_CMP0 ($eq).

7.10. Executing PEEPOPT pass (run peephole optimizers).

7.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

7.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\changer\N=s32'00000000000000000000000000001000:
  creating $alu model for $gt$../MODEL/changer.sv:13$119 ($gt): new $alu
  creating $alu cell for $gt$../MODEL/changer.sv:13$119: $auto$alumacc.cc:485:replace_alu$317
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\comparator\N=s32'00000000000000000000000000001000:
  creating $alu model for $ge$../MODEL/comparator.sv:21$108 ($ge): new $alu
  creating $alu model for $le$../MODEL/comparator.sv:24$111 ($le): merged with $ge$../MODEL/comparator.sv:21$108.
  creating $alu cell for $ge$../MODEL/comparator.sv:21$108, $le$../MODEL/comparator.sv:24$111: $auto$alumacc.cc:485:replace_alu$323
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\shifter\N=s32'00000000000000000000000000001000:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000:
  creating $macc model for $add$../MODEL/subtractor.sv:28$92 ($add).
  creating $macc model for $sub$../MODEL/subtractor.sv:19$86 ($sub).
  creating $macc model for $sub$../MODEL/subtractor.sv:23$87 ($sub).
  creating $alu model for $macc $sub$../MODEL/subtractor.sv:23$87.
  creating $alu model for $macc $sub$../MODEL/subtractor.sv:19$86.
  creating $alu model for $macc $add$../MODEL/subtractor.sv:28$92.
  creating $alu model for $ge$../MODEL/subtractor.sv:18$85 ($ge): merged with $sub$../MODEL/subtractor.sv:23$87.
  creating $alu cell for $sub$../MODEL/subtractor.sv:19$86: $auto$alumacc.cc:485:replace_alu$338
  creating $alu cell for $add$../MODEL/subtractor.sv:28$92: $auto$alumacc.cc:485:replace_alu$341
  creating $alu cell for $sub$../MODEL/subtractor.sv:23$87, $ge$../MODEL/subtractor.sv:18$85: $auto$alumacc.cc:485:replace_alu$344
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module exe_unit_w6_rtl:
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$15 ($add).
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$19 ($add).
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$23 ($add).
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$27 ($add).
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$31 ($add).
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$35 ($add).
  creating $macc model for $add$../MODEL/exe_unit_w6.sv:79$39 ($add).
  merging $macc model for $add$../MODEL/exe_unit_w6.sv:79$35 into $add$../MODEL/exe_unit_w6.sv:79$39.
  merging $macc model for $add$../MODEL/exe_unit_w6.sv:79$31 into $add$../MODEL/exe_unit_w6.sv:79$39.
  merging $macc model for $add$../MODEL/exe_unit_w6.sv:79$27 into $add$../MODEL/exe_unit_w6.sv:79$39.
  merging $macc model for $add$../MODEL/exe_unit_w6.sv:79$23 into $add$../MODEL/exe_unit_w6.sv:79$39.
  merging $macc model for $add$../MODEL/exe_unit_w6.sv:79$19 into $add$../MODEL/exe_unit_w6.sv:79$39.
  merging $macc model for $add$../MODEL/exe_unit_w6.sv:79$15 into $add$../MODEL/exe_unit_w6.sv:79$39.
  creating $macc cell for $add$../MODEL/exe_unit_w6.sv:79$39: $auto$alumacc.cc:365:replace_macc$353
  created 0 $alu and 1 $macc cells.

7.13. Executing SHARE pass (SAT-based resource sharing).

7.14. Executing OPT pass (performing simple optimizations).

7.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

7.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 0 changes.

7.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.14.6. Executing OPT_DFF pass (perform DFF optimizations).

7.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 6 unused cells and 10 unused wires.
<suppressed ~10 debug messages>

7.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.14.9. Rerunning OPT passes. (Maybe there is more to do..)

7.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

7.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 0 changes.

7.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.14.13. Executing OPT_DFF pass (perform DFF optimizations).

7.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.14.16. Finished OPT passes. (There is nothing left to do.)

7.15. Executing MEMORY pass.

7.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

7.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

7.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.17. Executing OPT pass (performing simple optimizations).

7.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
<suppressed ~2 debug messages>
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~4 debug messages>
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
<suppressed ~3 debug messages>
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
<suppressed ~2 debug messages>
Optimizing module exe_unit_w6_rtl.
<suppressed ~101 debug messages>

7.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.17.3. Executing OPT_DFF pass (perform DFF optimizations).

7.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 2 unused cells and 50 unused wires.
<suppressed ~7 debug messages>

7.17.5. Finished fast OPT passes.

7.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

7.19. Executing OPT pass (performing simple optimizations).

7.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\changer\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\comparator\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\shifter\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\subtractor\N=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \exe_unit_w6_rtl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

7.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\changer\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\comparator\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\shifter\N=s32'00000000000000000000000000001000.
  Optimizing cells in module $paramod\subtractor\N=s32'00000000000000000000000000001000.
  Optimizing cells in module \exe_unit_w6_rtl.
Performed a total of 0 changes.

7.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `\exe_unit_w6_rtl'.
Removed a total of 0 cells.

7.19.6. Executing OPT_SHARE pass.

7.19.7. Executing OPT_DFF pass (perform DFF optimizations).

7.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..

7.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.19.10. Finished OPT passes. (There is nothing left to do.)

7.20. Executing TECHMAP pass (map to technology primitives).

7.20.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

7.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $sdff.
Using extmapper maccmap for cells of type $macc.
  add { 31'0000000000000000000000000000000 $add$../MODEL/exe_unit_w6.sv:79$11_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$38_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$34_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$30_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$26_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$22_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$18_Y [0] } (32 bits, unsigned)
  add { 31'0000000000000000000000000000000 $and$../MODEL/exe_unit_w6.sv:79$14_Y [0] } (32 bits, unsigned)
  packed 3 (3) bits / 3 words into adder tree
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using template $paramod$645fe0cc96ae5edb83bff90cc2c78f4a20ca3e3c\_90_pmux for cells of type $pmux.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000001 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000010 for cells of type $fa.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000011 for cells of type $fa.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$5e422c97d4648c7864402691d7b06fc43e6ffb33\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod$constmap:5a364ddcb357ea92d2cbe6389550e659ac18a65b$paramod$ed1b2f8d7cf549c99cbac27e7274d42f4116c218\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$dbcdc7e8aa1a4080cea2deda6fdc8772064f4d90\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$constmap:72cdabb1749dac72049399dad655ca81335c3226$paramod$c9b0e4287a2eb8d88b30f100e3158318a9c0abad\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$4bdb94ac02745db6fc41e2e497d9b9793cd51dc6\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~1411 debug messages>

7.21. Executing OPT pass (performing simple optimizations).

7.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
<suppressed ~36 debug messages>
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~10 debug messages>
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
<suppressed ~8 debug messages>
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
<suppressed ~70 debug messages>
Optimizing module exe_unit_w6_rtl.
<suppressed ~420 debug messages>

7.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
<suppressed ~9 debug messages>
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
<suppressed ~30 debug messages>
Finding identical cells in module `\exe_unit_w6_rtl'.
<suppressed ~12 debug messages>
Removed a total of 17 cells.

7.21.3. Executing OPT_DFF pass (perform DFF optimizations).

7.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 27 unused cells and 435 unused wires.
<suppressed ~32 debug messages>

7.21.5. Finished fast OPT passes.

7.22. Executing ABC pass (technology mapping using ABC).

7.22.1. Extracting gate netlist of module `$paramod\changer\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 50 gates and 67 wires to a netlist network with 16 inputs and 9 outputs.

7.22.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:               NOT cells:        3
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:                OR cells:       28
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

7.22.2. Extracting gate netlist of module `$paramod\comparator\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 69 gates and 86 wires to a netlist network with 16 inputs and 1 outputs.

7.22.2.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.2.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               XOR cells:        4
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:            ANDNOT cells:       20
ABC RESULTS:                OR cells:       12
ABC RESULTS:        internal signals:       69
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

7.22.3. Extracting gate netlist of module `$paramod\shifter\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 81 gates and 97 wires to a netlist network with 15 inputs and 8 outputs.

7.22.3.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.3.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        5
ABC RESULTS:               MUX cells:       24
ABC RESULTS:             ORNOT cells:        8
ABC RESULTS:                OR cells:       30
ABC RESULTS:            ANDNOT cells:       19
ABC RESULTS:        internal signals:       74
ABC RESULTS:           input signals:       15
ABC RESULTS:          output signals:        8
Removing temp directory.

7.22.4. Extracting gate netlist of module `$paramod\subtractor\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 184 gates and 201 wires to a netlist network with 16 inputs and 9 outputs.

7.22.4.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.4.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:       12
ABC RESULTS:              NAND cells:        4
ABC RESULTS:               NOR cells:        7
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               NOT cells:        8
ABC RESULTS:                OR cells:        3
ABC RESULTS:            ANDNOT cells:       55
ABC RESULTS:               XOR cells:       21
ABC RESULTS:               AND cells:       16
ABC RESULTS:               MUX cells:       22
ABC RESULTS:        internal signals:      176
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

7.22.5. Extracting gate netlist of module `\exe_unit_w6_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 92 gates and 124 wires to a netlist network with 31 inputs and 12 outputs.

7.22.5.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

7.22.5.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        7
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:                OR cells:       10
ABC RESULTS:              NAND cells:        2
ABC RESULTS:             ORNOT cells:        6
ABC RESULTS:               NOR cells:        7
ABC RESULTS:            ANDNOT cells:       30
ABC RESULTS:               MUX cells:        9
ABC RESULTS:        internal signals:       81
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       12
Removing temp directory.

7.23. Executing OPT pass (performing simple optimizations).

7.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\changer\N=s32'00000000000000000000000000001000.
Optimizing module $paramod\comparator\N=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>
Optimizing module $paramod\shifter\N=s32'00000000000000000000000000001000.
<suppressed ~24 debug messages>
Optimizing module $paramod\subtractor\N=s32'00000000000000000000000000001000.
Optimizing module exe_unit_w6_rtl.

7.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Finding identical cells in module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
<suppressed ~3 debug messages>
Finding identical cells in module `\exe_unit_w6_rtl'.
<suppressed ~3 debug messages>
Removed a total of 2 cells.

7.23.3. Executing OPT_DFF pass (perform DFF optimizations).

7.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 0 unused cells and 312 unused wires.
<suppressed ~5 debug messages>

7.23.5. Finished fast OPT passes.

7.24. Executing HIERARCHY pass (managing design hierarchy).

7.24.1. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\subtractor\N=s32'00000000000000000000000000001000

7.24.2. Analyzing design hierarchy..
Top module:  \exe_unit_w6_rtl
Used module:     $paramod\changer\N=s32'00000000000000000000000000001000
Used module:     $paramod\comparator\N=s32'00000000000000000000000000001000
Used module:     $paramod\shifter\N=s32'00000000000000000000000000001000
Used module:     $paramod\subtractor\N=s32'00000000000000000000000000001000
Removed 0 unused modules.

7.25. Printing statistics.

=== $paramod\changer\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 38
   Number of wire bits:             59
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $_ANDNOT_                      11
     $_NOT_                          3
     $_ORNOT_                        1
     $_OR_                          28

=== $paramod\comparator\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 55
   Number of wire bits:             69
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 53
     $_ANDNOT_                      20
     $_MUX_                          2
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          2
     $_ORNOT_                        6
     $_OR_                          12
     $_XNOR_                         4
     $_XOR_                          4

=== $paramod\shifter\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 83
   Number of wire bits:            104
   Number of public wires:           5
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 86
     $_ANDNOT_                      19
     $_MUX_                         24
     $_NOT_                          5
     $_ORNOT_                        8
     $_OR_                          30

=== $paramod\subtractor\N=s32'00000000000000000000000000001000 ===

   Number of wires:                151
   Number of wire bits:            178
   Number of public wires:           7
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                153
     $_ANDNOT_                      55
     $_AND_                         16
     $_MUX_                         22
     $_NAND_                         4
     $_NOR_                          7
     $_NOT_                          8
     $_ORNOT_                       12
     $_OR_                           3
     $_XNOR_                         5
     $_XOR_                         21

=== exe_unit_w6_rtl ===

   Number of wires:                 92
   Number of wire bits:            184
   Number of public wires:          19
   Number of public wire bits:     111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                107
     $_ANDNOT_                      30
     $_MUX_                          9
     $_NAND_                         2
     $_NOR_                          6
     $_NOT_                         12
     $_ORNOT_                        6
     $_OR_                          10
     $_SDFF_PN0_                    18
     $_XNOR_                         3
     $_XOR_                          7
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtractor\N=s32'00000000000000000000000000001000      1

=== design hierarchy ===

   exe_unit_w6_rtl                   1
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtractor\N=s32'00000000000000000000000000001000      1

   Number of wires:                419
   Number of wire bits:            594
   Number of public wires:          38
   Number of public wire bits:     213
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                438
     $_ANDNOT_                     135
     $_AND_                         16
     $_MUX_                         57
     $_NAND_                         8
     $_NOR_                         14
     $_NOT_                         30
     $_ORNOT_                       33
     $_OR_                          83
     $_SDFF_PN0_                    18
     $_XNOR_                        12
     $_XOR_                         32

7.26. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\changer\N=s32'00000000000000000000000000001000...
Checking module $paramod\comparator\N=s32'00000000000000000000000000001000...
Checking module $paramod\shifter\N=s32'00000000000000000000000000001000...
Checking module $paramod\subtractor\N=s32'00000000000000000000000000001000...
Checking module exe_unit_w6_rtl...
Found and reported 0 problems.

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `$paramod\changer\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 43 gates and 59 wires to a netlist network with 16 inputs and 9 outputs.

8.1.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:               AND cells:       17
ABC RESULTS:                OR cells:       16
ABC RESULTS:        internal signals:       34
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

8.2. Extracting gate netlist of module `$paramod\comparator\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 53 gates and 69 wires to a netlist network with 16 inputs and 1 outputs.

8.2.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.2.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        3
ABC RESULTS:               AND cells:       28
ABC RESULTS:               NOT cells:       20
ABC RESULTS:                OR cells:       40
ABC RESULTS:        internal signals:       52
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        1
Removing temp directory.

8.3. Extracting gate netlist of module `$paramod\shifter\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 86 gates and 101 wires to a netlist network with 15 inputs and 8 outputs.

8.3.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.3.2. Re-integrating ABC results.
ABC RESULTS:                OR cells:       43
ABC RESULTS:               NOT cells:        8
ABC RESULTS:               AND cells:       47
ABC RESULTS:        internal signals:       78
ABC RESULTS:           input signals:       15
ABC RESULTS:          output signals:        8
Removing temp directory.

8.4. Extracting gate netlist of module `$paramod\subtractor\N=s32'00000000000000000000000000001000' to `<abc-temp-dir>/input.blif'..
Extracted 153 gates and 169 wires to a netlist network with 16 inputs and 9 outputs.

8.4.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.4.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       20
ABC RESULTS:               AND cells:       63
ABC RESULTS:                OR cells:       59
ABC RESULTS:               XOR cells:       13
ABC RESULTS:        internal signals:      144
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        9
Removing temp directory.

8.5. Extracting gate netlist of module `\exe_unit_w6_rtl' to `<abc-temp-dir>/input.blif'..
Extracted 85 gates and 116 wires to a netlist network with 31 inputs and 12 outputs.

8.5.1. Executing ABC.
Running ABC command: "abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 7 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.5.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        9
ABC RESULTS:               NOT cells:       10
ABC RESULTS:               AND cells:       40
ABC RESULTS:                OR cells:       29
ABC RESULTS:        internal signals:       73
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       12
Removing temp directory.

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\changer\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\comparator\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\shifter\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module $paramod\subtractor\N=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \exe_unit_w6_rtl..
Removed 0 unused cells and 514 unused wires.
<suppressed ~5 debug messages>

10. Executing Verilog backend.

10.1. Executing BMUXMAP pass.

10.2. Executing DEMUXMAP pass.
Dumping module `$paramod\changer\N=s32'00000000000000000000000000001000'.
Dumping module `$paramod\comparator\N=s32'00000000000000000000000000001000'.
Dumping module `$paramod\shifter\N=s32'00000000000000000000000000001000'.
Dumping module `$paramod\subtractor\N=s32'00000000000000000000000000001000'.
Dumping module `\exe_unit_w6_rtl'.

11. Printing statistics.

=== $paramod\changer\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 35
   Number of wire bits:             56
   Number of public wires:           4
   Number of public wire bits:      25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $_AND_                         17
     $_NOT_                          7
     $_OR_                          16

   Estimated number of transistors:        212

=== $paramod\comparator\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 93
   Number of wire bits:            107
   Number of public wires:           3
   Number of public wire bits:      17
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 91
     $_AND_                         28
     $_NOT_                         20
     $_OR_                          40
     $_XOR_                          3

   Estimated number of transistors:        484

=== $paramod\shifter\N=s32'00000000000000000000000000001000 ===

   Number of wires:                 95
   Number of wire bits:            116
   Number of public wires:           5
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 98
     $_AND_                         47
     $_NOT_                          8
     $_OR_                          43

   Estimated number of transistors:        556

=== $paramod\subtractor\N=s32'00000000000000000000000000001000 ===

   Number of wires:                153
   Number of wire bits:            180
   Number of public wires:           7
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                155
     $_AND_                         63
     $_NOT_                         20
     $_OR_                          59
     $_XOR_                         13

   Estimated number of transistors:        928

=== exe_unit_w6_rtl ===

   Number of wires:                 95
   Number of wire bits:            187
   Number of public wires:          19
   Number of public wire bits:     111
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                110
     $_AND_                         40
     $_NOT_                         10
     $_OR_                          29
     $_SDFF_PN0_                    18
     $_XOR_                          9
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtractor\N=s32'00000000000000000000000000001000      1

   Estimated number of transistors:        542+

=== design hierarchy ===

   exe_unit_w6_rtl                   1
     $paramod\changer\N=s32'00000000000000000000000000001000      1
     $paramod\comparator\N=s32'00000000000000000000000000001000      1
     $paramod\shifter\N=s32'00000000000000000000000000001000      1
     $paramod\subtractor\N=s32'00000000000000000000000000001000      1

   Number of wires:                471
   Number of wire bits:            646
   Number of public wires:          38
   Number of public wire bits:     213
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                490
     $_AND_                        195
     $_NOT_                         65
     $_OR_                         187
     $_SDFF_PN0_                    18
     $_XOR_                         25

   Estimated number of transistors:       2722+

End of script. Logfile hash: 8ff9b01bff, CPU: user 0.61s system 0.02s, MEM: 28.50 MB peak
Yosys 0.23 (git sha1 7ce5011c24b, gcc 12.2.0 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os)
Time spent: 54% 2x abc (0 sec), 11% 26x opt_expr (0 sec), ...
